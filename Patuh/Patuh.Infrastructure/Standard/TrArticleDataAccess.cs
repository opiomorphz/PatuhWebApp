//Generated by .NET Class Generator Tools

using System;
using System.Data;
using System.Data.SqlClient;
using APP.Framework.Infrastructure;
using MvcContrib.Pagination;
using Patuh.Domain;
using Patuh.Domain.Dto;
using System.Collections.Generic;
using Patuh.Infrastructure.Utils;

namespace Patuh.Infrastructure
{
    public partial class TrArticleDataAccess
    {
        private DAL DALInfo;

        public TrArticleDataAccess(DAL objDAL)
        {
            DALInfo = objDAL;
            DALInfo.ConnectionString = new Connection(DALInfo).ConnectionString(DALInfo.ApplicationMode);
        }

        private static T Mapper<T>(object obj)
        {
            T val = default(T);
            if (obj != DBNull.Value)
            {
                val = (T)obj;
            }
            return val;
        }



        #region Standard


        public TrArticle GetArticleById(long Id)
        {
            SqlConnection conn = new SqlConnection(DALInfo.ConnectionString);
            SqlCommand cmd = new SqlCommand("up_RetrieveTrArticle", conn);
            TrArticle objTbl = new TrArticle();
            cmd.CommandType = CommandType.StoredProcedure;

            cmd.Parameters.AddWithValue("@Id", Id);
            SqlDataReader da = default(SqlDataReader);
            try
            {
                cmd.Connection.Open();
                da = cmd.ExecuteReader();

                if (da.HasRows)
                {
                    objTbl = MoveDataToCollection(da)[0];
                }
                else
                {
                    return null;//objTbl;
                }
            }
            catch (Exception)
            {
                throw;
            }
            finally
            {
                da.Close();
                conn.Close();
                cmd.Dispose();
            }

            return objTbl;
        }

        public List<TrArticle> GetTrArticleListCustom(string Where, string OrderBy, int Start, int Limit)
        {
            SqlConnection conn = new SqlConnection(DALInfo.ConnectionString);
            SqlCommand cmd = new SqlCommand("up_RetrieveTrArticleListCustom", conn);
            SqlParameter orderBy = new SqlParameter("@OrderBy", SqlDbType.VarChar);
            SqlParameter where = new SqlParameter("@Where", SqlDbType.VarChar);
            SqlParameter start = new SqlParameter("@Start", SqlDbType.Int);
            SqlParameter limit = new SqlParameter("@Limit", SqlDbType.VarChar);

            Start = (Start - 1) * Limit;

            where.Value = Where;
            orderBy.Value = OrderBy;
            start.Value = Start;
            limit.Value = Limit;

            cmd.Parameters.Add(where);
            cmd.Parameters.Add(orderBy);
            cmd.Parameters.Add(start);
            cmd.Parameters.Add(limit);

            List<TrArticle> msUserList = new List<TrArticle>();
            cmd.CommandType = CommandType.StoredProcedure;

            SqlDataReader da = default(SqlDataReader);
            cmd.Connection.Open();
            da = cmd.ExecuteReader();

            try
            {
                if (da.HasRows)
                {
                    msUserList = MoveDataToCollection(da, true);
                }
                else
                {
                    return msUserList;
                }
            }
            finally
            {
                da.Close();
                conn.Close();
                cmd.Dispose();
            }

            return msUserList;
        }

        public IPagination<TrArticle> GetTrArticleListPaginated(string Where, string OrderBy, int Start, int Limit)
        {
            SqlConnection conn = new SqlConnection(DALInfo.ConnectionString);
            SqlCommand cmd = new SqlCommand("up_RetrieveTrArticleListCustom", conn);
            SqlParameter orderBy = new SqlParameter("@OrderBy", SqlDbType.VarChar);
            SqlParameter where = new SqlParameter("@Where", SqlDbType.VarChar);
            SqlParameter start = new SqlParameter("@Start", SqlDbType.Int);
            SqlParameter limit = new SqlParameter("@Limit", SqlDbType.VarChar);

            int page = Start;
            Start = (Start - 1) * Limit;

            

            where.Value = Where;
            orderBy.Value = OrderBy;
            start.Value = Start;
            limit.Value = Limit;

            cmd.Parameters.Add(where);
            cmd.Parameters.Add(orderBy);
            cmd.Parameters.Add(start);
            cmd.Parameters.Add(limit);

            List<TrArticle> msUserList = new List<TrArticle>();
            cmd.CommandType = CommandType.StoredProcedure;

            SqlDataReader da = default(SqlDataReader);
            cmd.Connection.Open();
            da = cmd.ExecuteReader();

            try
            {
                if (da.HasRows)
                {
                    msUserList = MoveDataToCollection(da, true);
                }
                else
                {
                }
            }
            finally
            {
                da.Close();
                conn.Close();
                cmd.Dispose();
            }


            return new CustomPagination<TrArticle>(msUserList
                , page, Limit
                , Convert.ToInt32(msUserList.Count > 0 ? msUserList[0].TotalRecord : 0)); 
        }


        private List<TrArticle> MoveDataToCollection(SqlDataReader MyReader, Boolean isCustom = false)
        {
            List<TrArticle> msArticleList = new List<TrArticle>();
            while (MyReader.Read())
            {

                var columns = new List<string>();

                for (int i = 0; i < MyReader.FieldCount; i++)
                {
                    columns.Add(MyReader.GetName(i));
                }

                TrArticle objTrArticle = new TrArticle();
                objTrArticle.Id = long.Parse(MyReader["Id"].ToString().Trim());
                objTrArticle.Category = MyReader["Category"].ToString().Trim();
                objTrArticle.Title = MyReader["Title"].ToString().Trim();
                objTrArticle.Story = MyReader["Story"].ToString();
                objTrArticle.GPSLocation = MyReader["GPSLocation"].ToString().Trim();
                objTrArticle.GPSLong = double.Parse(string.IsNullOrEmpty(MyReader["GPSLong"].ToString()) ? "0" : MyReader["GPSLong"].ToString());
                objTrArticle.GPSLat = double.Parse(string.IsNullOrEmpty(MyReader["GPSLat"].ToString()) ? "0" : MyReader["GPSLat"].ToString());
                objTrArticle.cStatus = MyReader["cStatus"].ToString().Trim();
                objTrArticle.cCreated = MyReader["cCreated"].ToString().Trim();
                objTrArticle.dCreated = Mapper<DateTime>(MyReader["dCreated"]);
                objTrArticle.cLastUpdated = MyReader["cLastUpdated"].ToString().Trim();
                objTrArticle.dLastUpdated = Mapper<DateTime>(MyReader["dLastUpdated"]);
                objTrArticle.RowState = DataRowState.Unchanged;

                int fields = MyReader.FieldCount;
                int visi =  MyReader.VisibleFieldCount;

                if (isCustom == true)
                {
                    objTrArticle.RowNumber = Convert.ToInt64(MyReader["RowNumber"]);

                    objTrArticle.TotalRecord = Convert.ToInt64(MyReader["TotalRecord"]);
                }
                msArticleList.Add(objTrArticle);
            }
            return msArticleList;
        }


        public List<TrArticle> MoveDataToCollectionDomain(DataTable dataTable)
        {
            List<TrArticle> trArticleList = new List<TrArticle>();
            for (int i = 0; i <= dataTable.Rows.Count - 1; i++)
            {
                TrArticle objTrArticle = new TrArticle();
                objTrArticle.Id = long.Parse(dataTable.Rows[i]["Id"].ToString().Trim());
                objTrArticle.Category = dataTable.Rows[i]["Category"].ToString().Trim();
                objTrArticle.Title = dataTable.Rows[i]["Title"].ToString().Trim();
                objTrArticle.Story = dataTable.Rows[i]["Story"].ToString();
                objTrArticle.GPSLocation = dataTable.Rows[i]["GPSLocation"].ToString().Trim();
                objTrArticle.GPSLong = double.Parse(string.IsNullOrEmpty(dataTable.Rows[i]["GPSLong"].ToString()) ? "0" : dataTable.Rows[i]["GPSLong"].ToString());
                objTrArticle.GPSLat = double.Parse(string.IsNullOrEmpty(dataTable.Rows[i]["GPSLat"].ToString()) ? "0" : dataTable.Rows[i]["GPSLat"].ToString());
                objTrArticle.cStatus = dataTable.Rows[i]["cStatus"].ToString().Trim();
                objTrArticle.cCreated = dataTable.Rows[i]["cCreated"].ToString().Trim();
                objTrArticle.dCreated = Mapper<DateTime>(dataTable.Rows[i]["dCreated"]);
                objTrArticle.cLastUpdated = dataTable.Rows[i]["cLastUpdated"].ToString().Trim();
                objTrArticle.dLastUpdated = Mapper<DateTime>(dataTable.Rows[i]["dLastUpdated"]);
                objTrArticle.RowState = DataRowState.Unchanged;

                trArticleList.Add(objTrArticle);
            }
            return trArticleList;
        }


        public TransactionResult Update(ref List<TrArticle> objList)
        {
            List<SqlCommand> ArraySQLCmd = new List<SqlCommand>();
            TransactionDB TransDB = new TransactionDB(DALInfo);
            TransactionResult ObjTransResult = default(TransactionResult);

            GetBatchQueryUpdate(objList, ref ArraySQLCmd);

            ObjTransResult = TransDB.BatchUpdate(ArraySQLCmd);

            if (ObjTransResult.Result == 1)
            {
                objList = AcceptChanges(ref objList);
            }

            return ObjTransResult;
        }

        public TransactionResult Update(ref TrArticle item)
        {
            List<SqlCommand> ArraySQLCmd = new List<SqlCommand>();
            TransactionDB TransDB = new TransactionDB(DALInfo);
            TransactionResult ObjTransResult = default(TransactionResult);
            
            GetSingleQueryUpdate(item, ref ArraySQLCmd);

            ObjTransResult = TransDB.BatchUpdate(ArraySQLCmd);

            if (ObjTransResult.Result == 1 && !item.RowState.Equals(DataRowState.Deleted))
            {
                item.RowState = DataRowState.Unchanged;
            }

            return ObjTransResult;
        }

        public long Insert(ref TrArticle item)
        {
            SqlCommand cmd = null;
            cmd = new SqlCommand("up_InsertTrArticle");
            cmd.Connection = new SqlConnection(DALInfo.ConnectionString);
            cmd.CommandType = CommandType.StoredProcedure;            
            cmd.Parameters.Add("@Category", SqlDbType.VarChar, 10).Value = item.Category ?? (object)DBNull.Value;
            cmd.Parameters.Add("@Title", SqlDbType.VarChar, 20).Value = item.Title ?? (object)DBNull.Value;
            cmd.Parameters.Add("@Story", SqlDbType.VarChar, 255).Value = item.Story ?? (object)DBNull.Value;
            cmd.Parameters.Add("@GPSLocation", SqlDbType.VarChar, 100).Value = item.GPSLocation ?? (object)DBNull.Value;
            cmd.Parameters.Add("@GPSLong", SqlDbType.Float).Value = item.GPSLong == null ? (object)DBNull.Value : item.GPSLong;
            cmd.Parameters.Add("@GPSLat", SqlDbType.Float).Value = item.GPSLat == null ? (object)DBNull.Value : item.GPSLat;
            cmd.Parameters.Add("@cStatus", SqlDbType.VarChar, 1).Value = item.cStatus == null ? (object)DBNull.Value : item.cStatus;
            cmd.Parameters.Add("@cCreated", SqlDbType.VarChar, 20).Value = item.cCreated ?? (object)DBNull.Value;
            cmd.Parameters.Add("@cLastUpdated", SqlDbType.VarChar, 20).Value = item.cLastUpdated == null ? (object)DBNull.Value : item.cLastUpdated;

            cmd.Connection.Open();
            object generatedId  = cmd.ExecuteScalar();
            cmd.Connection.Close();
            
            long articleId= long.Parse(generatedId == null ? "0" : generatedId.ToString());
            item.Id = articleId;


            return articleId;
        }

        public List<TrArticle> AcceptChanges(ref List<TrArticle> objList)
        {
            List<TrArticle> DataBindCol = new List<TrArticle>();

            foreach (TrArticle item in objList)
            {
                if (item.RowState != DataRowState.Deleted)
                {
                    item.RowState = DataRowState.Unchanged;
                    DataBindCol.Add(item);
                }
            }
            objList = new List<TrArticle>();
            objList = DataBindCol;
            return DataBindCol;
        }

        public void GetBatchQueryUpdate(List<TrArticle> objDomain, ref List<SqlCommand> ArraySQLCmd)
        {
            foreach (TrArticle item in objDomain)
            {
                TrArticle itm = item;
                DALInfo.AssignedInfo(ref itm);
                UpdateQuery(itm, ArraySQLCmd);
            }
        }

        public void GetSingleQueryUpdate(TrArticle item, ref List<SqlCommand> ArraySQLCmd)
        {
            TrArticle itm = item;
            //DALInfo.AssignedInfo(ref itm);
            UpdateQuery(itm, ArraySQLCmd);
        }

        public void UpdateQuery(TrArticle item, List<SqlCommand> ArraySQLCmd)
        {
            SqlCommand cmd = null;
            if (item.RowState == DataRowState.Added)
            {
                //using (SqlConnection sqlCon = new SqlConnection(DALInfo.ConnectionString))
                //{
                    //sqlCon.Open();
                    cmd = new SqlCommand("up_InsertTrArticle");
                    //cmd.Connection = sqlCon;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add("@Category", SqlDbType.VarChar, 10).Value = item.Category ?? (object)DBNull.Value;
                    cmd.Parameters.Add("@Title", SqlDbType.VarChar, 20).Value = item.Title ?? (object)DBNull.Value;
                    cmd.Parameters.Add("@Story", SqlDbType.VarChar, 255).Value = item.Story ?? (object)DBNull.Value;
                    cmd.Parameters.Add("@GPSLocation", SqlDbType.VarChar, 100).Value = item.GPSLocation ?? (object)DBNull.Value;
                    cmd.Parameters.Add("@GPSLong", SqlDbType.Float).Value = item.GPSLong == null ? (object)DBNull.Value : item.GPSLong;
                    cmd.Parameters.Add("@GPSLat", SqlDbType.Float).Value = item.GPSLat == null ? (object)DBNull.Value : item.GPSLat;
                    cmd.Parameters.Add("@cStatus", SqlDbType.VarChar, 1).Value = item.cStatus == null ? (object)DBNull.Value : item.cStatus;
                    cmd.Parameters.Add("@cCreated", SqlDbType.VarChar, 20).Value = item.cCreated ?? (object)DBNull.Value;
                    cmd.Parameters.Add("@cLastUpdated", SqlDbType.VarChar, 20).Value = item.cLastUpdated == null ? (object)DBNull.Value : item.cLastUpdated;

                    //cmd.ExecuteNonQuery();
                //}
            }
            else if (item.RowState == DataRowState.Modified)
            {
                cmd = new SqlCommand("up_UpdateTrArticle");
                //cmd.Connection = new SqlConnection(DALInfo.ConnectionString);
                cmd.CommandType = CommandType.StoredProcedure;
                //cmd.Parameters.Add("@moduleid", SqlDbType.VarChar, 5).Value = item.ModuleID;
                cmd.Parameters.Add("@Id", SqlDbType.BigInt).Value = item.Id;
                cmd.Parameters.Add("@Category", SqlDbType.VarChar, 10).Value = item.Category ?? (object)DBNull.Value;
                cmd.Parameters.Add("@Title", SqlDbType.VarChar, 20).Value = item.Title ?? (object)DBNull.Value;
                cmd.Parameters.Add("@Story", SqlDbType.VarChar, 255).Value = item.Story ?? (object)DBNull.Value;
                cmd.Parameters.Add("@GPSLocation", SqlDbType.VarChar, 100).Value = item.GPSLocation ?? (object)DBNull.Value;
                cmd.Parameters.Add("@GPSLong", SqlDbType.Float).Value = item.GPSLong == null ? (object)DBNull.Value : item.GPSLong;
                cmd.Parameters.Add("@GPSLat", SqlDbType.Float).Value = item.GPSLat == null ? (object)DBNull.Value : item.GPSLat;
                cmd.Parameters.Add("@cStatus", SqlDbType.VarChar, 1).Value = item.cStatus == null ? (object)DBNull.Value : item.cStatus;
                cmd.Parameters.Add("@cLastUpdated", SqlDbType.VarChar, 20).Value = item.cLastUpdated == null ? (object)DBNull.Value : item.cLastUpdated;
                //cmd.ExecuteNonQuery();
            }
            else if (item.RowState == DataRowState.Deleted)
            {
                cmd = new SqlCommand("up_DeleteTrArticle");
                cmd.CommandType = CommandType.StoredProcedure;
                //cmd.Parameters.Add("@moduleid", SqlDbType.VarChar, 5).Value = item.ModuleID;
                cmd.Parameters.Add("@Id", SqlDbType.BigInt).Value = item.Id;
                //cmd.Parameters.Add("@userroleid", SqlDbType.VarChar, 20).Value = item.UserRoleID;
                //cmd.Parameters.Add("@modusrid", SqlDbType.VarChar, 20).Value = item.ModUsrID == null ? (object)DBNull.Value : item.ModUsrID;
                //cmd.ExecuteNonQuery();
            }

            if (cmd != null)
            {
                ArraySQLCmd.Add(cmd);
            }
        }


        #endregion
    }
}