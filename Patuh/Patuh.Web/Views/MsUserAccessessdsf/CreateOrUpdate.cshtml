@using SOPCompliance.Domain;
@using MvcContrib.UI.Grid;
@using SOPCompliance.Web.Mvc.Controllers.ViewModels;

@model MsUserAccessViewModel

@{
    ViewBag.Title = "MsUserAccess Edit";
    
}
@section CustomCssHead{
    <link href="@Url.Content("~/assets/plugins/typeaheadjs/lib/typeahead.js-bootstrap.css")" rel="stylesheet" type="text/css" />
    <link href="@Url.Content("~/Content/skin-win7/ui.fancytree.css")" rel="stylesheet" type="text/css" />
}
@section CustomJsHead{
    <script src="@Url.Content("~/assets/plugins/typeaheadjs/lib/typeahead.js")"></script>
    <script src="@Url.Content("~/Content/js/hogan-2.0.0.js")" type="text/javascript"></script>
    <script src="@Url.Content("~/Content/js/jquery.fancytree.js")" type="text/javascript"></script>
}
<div class="page-header">
	    <h1>Input Form UserAccesses</h1>
    </div>
<div class="panel panel-default">
            <div class="panel-heading">
              <h3 class="panel-title">Input Form UserAccesses</h3>
            </div>
            <div class="panel-body">
        @{
            var formAttr = new Dictionary<string, object>();
            formAttr.Add("class", "form-horizontal");
            formAttr.Add("role", "form");
        }
        @* -- Begin Form -- *@
        @using (Html.BeginForm("CreateOrUpdate", "MsUserAccesses"
            , ViewBag.RouteDicForList as RouteValueDictionary
            , FormMethod.Post, formAttr))
        {
    @Html.AntiForgeryToken()
    
    
              <div class="form-group">  
              @Html.LabelFor(m => m.UserName, "User Name", new { @class = "col-lg-2 control-label" })
              <div class="col-lg-4">
              @Html.TextBoxFor(m => m.UserName, new { @class = "form-control", @readonly= "true" })
              </div>
			  @Html.ValidationMessageFor(m => m.FullName)
              @Html.HiddenFor(m => m.nPernr)
              </div>  
    	
              <div class="form-group">  
              @Html.LabelFor(m => m.FullName, "Full Name", new { @class = "col-lg-2 control-label" })
              <div class="col-lg-4">
              @Html.TextBoxFor(m => m.FullName, new { @class = "typeahead form-control" })
              </div>
			  @Html.ValidationMessageFor(m => m.FullName)
              </div>              	
            
			  <div class="form-group">  
              @Html.LabelFor(m => m.LocationName, null, new { @class = "col-lg-2 control-label" })
              <div class="col-lg-4">
              @Html.TextBoxFor(m => m.LocationName, new { @class = "form-control" })
              </div>
              @Html.HiddenFor(m => m.LocationId)
			  @Html.ValidationMessageFor(m => m.LocationName)
              @Html.HiddenFor(m => m.ListDistricts)
              </div>  
    		
			            
    		
			              
    		
             @Html.ValidationMessageFor(m => m.listGroupAccessViewMode)
            <div class="form-group">
                <div class="col-lg-offset-2 col-lg-6">
             @Html.Grid(Model.listGroupAccessViewMode.Select((item, index) => new { Item = item, Index = index })).Columns(column =>
        {

            column.For(ent => ent.Item.GroupAccessName).Named("Group");
            column.For(ent => Html.CheckBox("listGroupAccessViewMode[" + ent.Index + "].GroupAccessIsActive", ent.Item.GroupAccessIsActive)).Named("Selected");
            column.For(ent => Html.Hidden("listGroupAccessViewMode[" + ent.Index + "].Id", ent.Item.Id));
            column.For(ent => Html.Hidden("listGroupAccessViewMode[" + ent.Index + "].GroupAccessName", ent.Item.GroupAccessName));
            column.For(ent => Html.Hidden("listGroupAccessViewMode[" + ent.Index + "].ListRoleMenu", ent.Item.GroupAccessName));



        })
                </div>
            </div>
    
            <div class="panel panel-info">
                <div class="panel-heading">
                    <h3 class="panel-title">
                        Region & District Access</h3>
                </div>
                <div class="panel-body">
                    <div id="menucheck">
                    </div>
                </div>
            </div>
    
			@Html.SubmitButton("btnSave", "Save", new { @class = "btn btn-primary" })
    
           
}
</div>
</div>
<script type="text/javascript" language="javascript">


    $(function () {
        $("#FullName").typeahead({
            name: 'query',
            remote: {
                url: '/MsUserAccesses/GetUserList?query=%QUERY'
             , filter: function (parsedResponse) {

                 var dataset = [];
                 for (i = 0; i < parsedResponse.length; i++) {
                     dataset.push({
                         name: parsedResponse[i].UserName,
                         id: parsedResponse[i].UserName,
                         FullName: parsedResponse[i].FullName,
                         value: parsedResponse[i].FullName,
                         Location: parsedResponse[i].Location,
                         LocationName: parsedResponse[i].LocationName,
                         Pernr: parsedResponse[i].pernr
                     });
                 }

                 return dataset;
             }
            },
            template: '<p><strong>{{name}} ({{FullName}})</strong> – {{LocationName}}</p>',
            engine: Hogan

        }).bind('typeahead:selected', function (obj, datum) {
            $('#FullName').val(datum.FullName);
            $('#LocationId').val(datum.Location);
            $('#LocationName').val(datum.LocationName);
            $('#nPernr').val(datum.Pernr);
            $('#UserName').val(datum.name);
        });


        $("#menucheck").fancytree({
            checkbox: true,
            selectMode: 3,
            source: { url: '/MsUserAccesses/RegionAccessTree/' + $('#nPernr').val() },
            select: function (e, data) {
                // Get a list of all selected nodes, and convert to a key array:
                var selKeys = $.map(data.tree.getSelectedNodes(), function (node) {
                    return node.key;
                });

                $("#ListDistricts").val(selKeys.join(", "));

            },
            dblclick: function (e, data) {
                data.node.toggleSelected();
            },
            keydown: function (e, data) {
                if (e.which === 32) {
                    data.node.toggleSelected();
                    return false;
                }
            },
            // The following options are only required, if we have more than one tree on one page:
            cookieId: "fancytree-Cb3",
            idPrefix: "fancytree-Cb3-"
        });

    })

</script>

